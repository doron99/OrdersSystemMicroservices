@{
    @using Microsoft.Extensions.Configuration
    @inject IConfiguration Configuration
}

<div class="text-center">
    This page is perform websocket by SignalR
    <br />
    on Order status changed, and it will be notify in this page.
</div>
<h3>List of Orders </h3>
<div id="ordersContainer" class="grid-container" style=""></div>








<script>

    $(document).ready(function () {
        // Create a connection to the hub
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("@Configuration["ORDER_API_MICROSERVICE_BASE_URL"]" +"/orderHub")
            .build();

        //handle incoming messages
        connection.on("ReceiveOrderStatusUpdate", (orderId, status, hubMsg) => {
            console.log(`Order ${orderId} status updated to: ${status}`);
            switch (status) {
                case 0:
                    if (hubMsg)
                        toastr.warning(`${hubMsg}`, 'SignalR notify');
                    else
                        toastr.warning(`Order ${orderId} status has been back to draft`, 'SignalR notify');
                    break;
                case 1:
                    if (hubMsg)
                        toastr.success(`${hubMsg}`, 'SignalR notify');
                    else
                        toastr.success(`Order ${orderId} status has been confirmed`, 'SignalR notify');
                    break;
                case 2:
                    if (hubMsg)
                        toastr.error(`${hubMsg}`, 'SignalR notify');
                    else
                        toastr.error(`Order ${orderId} status has been canceled`, 'SignalR notify');
                    break;
                case 3:
                    if (hubMsg) toastr.info(`${hubMsg}`, 'SignalR notify');
                    break;
                default:
                // Code to be executed if no case matches
            }
            getOrders();
        });
        connection.on("ReceiveOrderConfirmed", (orderId, status) => {
            console.log(`Order ${orderId} status updated to: ${status}`);
            if (status == 1) {
                //confirm
                toastr.success(`Order ${orderId} status has been confirmed`, 'SignalR notify');
            } else {
                //cancelled
                toastr.error(`Order ${orderId} status has been canceled`, 'SignalR notify');
            }
            getOrders();
        });

        // Start the connection
        connection.start()
            .then(() => console.log("Connected to the hub"))
            .catch(err => console.error("Error connecting to the hub: ", err));

        getOrders();
    });
    function getOrders() {
        console.log('url', "@Configuration["ORDER_CLIENT_MICROSERVICE_BASE_URL"]" + '/api/orders?page=1&pageSize=100')
        fetch("@Configuration["ORDER_CLIENT_MICROSERVICE_BASE_URL"]" + '/api/orders?page=1&pageSize=100')
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok: ' + response.statusText);
                }
                return response.json();
            })
            .then(data => {
                console.log('Orders:', data);
                renderHtmlTable(data);


            })
            .catch(error => {
                console.error('There was a problem with the fetch operation:', error);
            });
    }
    function renderHtmlTable(data) {
        const ordersContainer = document.getElementById('ordersContainer');
        let html = ''; // Initialize an empty string to hold the HTML

        data.forEach(order => {


            const orderItems = `
            <table style="border-collapse: collapse;">
                <thead>
                    <tr>
                        <th>Order Item ID</th>
                        <th>SKU</th>
                        <th>Quantity</th>
                        <th>Unit Price</th>
                    </tr>
                </thead>
                <tbody>
                    ${order.orderItems.map(oi => {
                            return `
                        <tr>
                            <td>${oi.orderItemId}</td>
                            <td>${oi.sku}</td>
                            <td>${oi.quantity}</td>
                            <td>${oi.unitPrice}$</td>
                        </tr>`;
                    }).join('')}
                         <tr class="font-weight-bold">
                         <td colspan="3" class="text-right">Total Amount:</td>
                             <td>${order.totalAmount}$</td>
                         </tr>
                </tbody>
            </table>
            `;
            let orderStatusBadge = 0;
            switch (order.status) {
                case 0:
                    orderStatusBadge = '<span class="badge alert-primary">Draft</span>'
                    break;
                case 1:
                    orderStatusBadge = '<span class="badge alert-success">Confirmed</span>'
                    break;
                case 2:
                    orderStatusBadge = '<span class="badge alert-danger">canceled</span>'
                    break;
                case 3:
                    orderStatusBadge = '<span class="badge alert-warning">pending approval</span>'
                    break;
                default:
                // Code to be executed if no case matches
            }
           

            // Prepare the HTML for each order
            html += `<div class="order item">
                <div><strong>ID:</strong> ${order.orderId}
                <div><strong>customerId:</strong> ${order.customerId}</div>
                <div><strong>customerName:</strong> ${order.customerName}</div>
                <div><strong>createdAt:</strong> ${formatDate(order.createdAt)}</div>
                <div><strong>status:</strong>${orderStatusBadge}</div>

                <div><strong>Order Items</strong> ${orderItems}</div>
                <div style="margin-bottom:20px;margin-top:20px; ">
                    <a href='/orders/edit/${order.orderId}' class="btn btn-warning btn-sm" type='button' >Edit order</a>
                </div>
                <a class="btn btn-success btn-sm" onclick="OrderChangeStatus('${order.orderId}','Confirm')">Confirm</a>
                |
                <a class="btn btn-danger btn-sm" onclick="OrderChangeStatus('${order.orderId}','Cancel')">Cancel</a>
            </div></div>`;
        });

        // Set the innerHTML of the container once
        ordersContainer.innerHTML = html;
    }
    function OrderChangeStatus(id,action) {
        fetch(`http://localhost:5002/api/orders/Order${action}/` +id)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok: ' + response.statusText);
                }
                return response.json();
            })
            .then(data => {
                console.log('Order status:', data);
                getOrders();
            })
            .catch(error => {
                console.error('There was a problem with the fetch operation:', error);
            });
    }
    function formatDate(strDatetime) {
        const date = new Date(strDatetime);

        const options = { day: '2-digit', month: '2-digit', year: 'numeric', hour: '2-digit', minute: '2-digit', hour12: false };
        const formattedDate = date.toLocaleString('en-GB', options).replace(',', '').replace(' ', ' ');
        return formattedDate;
    }
</script>


<style>
    body {
        font-family: Arial, sans-serif;
        background-color: #f9f9f9;
        margin: 0;
    }

    .container {
        /* width: 80%;
            max-width: 800px;*/
        margin: 20px auto;
        background-color: #fff;
        padding: 20px;
        border-radius: 5px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    .order {
        border: 1px solid #f2f2f2;
        padding: 4px;
        margin-bottom: 5px;
    }

    h1, h2 {
        color: #333;
    }

    .main-content {
        display: flex;
        justify-content: space-between;
    }

    .addresses {
        width: 60%;
    }

    .order-items {
        width: 35%;
        margin-left: 20px; /* Space between summary and order items */
    }

    table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 10px;
    }

    th, td {
        border: 1px solid #ddd;
        padding: 8px;
    }

    th {
        background-color: #f2f2f2;
    }

    .grid-container {
        display: grid;
        grid-template-columns: 1fr 1fr; /* Two equal columns */
        gap: 15px; /* Gap between the columns */
    }

    .item {
        padding: 20px; /* Add some padding */
    }
</style>
