
@{
    var customers = ViewData["Customers"] as List<Customer>; // Adjust the type as necessary
    var jsonCustomers = Json.Serialize(customers); // Serialize customers into JSON
    var products = ViewData["Products"] as List<Client.API.Dtos.ProductDto>; // Adjust the type as necessary
    var jsonProducts = Json.Serialize(products); // Serialize customers into JSON
    @using Microsoft.Extensions.Configuration
    @inject IConfiguration Configuration
}

<h1>Add new order</h1>

<div>
    <label for="customer">Choose Customer:</label>
    <select id="customer">
        <!-- Customers will be populated here -->
    </select>
    <button onclick="createOrder();" id="addNewOrder">Add new order</button>

</div>




<script>
    // Assuming you have this data from your backend
    var customers = @Html.Raw(jsonCustomers);
    var products = @Html.Raw(jsonProducts);

    const productList = [];
    const productListElement = document.getElementById('productList');
    const customerSelect = document.getElementById('customer');
    const productSelect = document.getElementById('product');

    // Populate customers in dropdown
    customers.forEach(customer => {
        const option = document.createElement('option');
        option.value = customer.customerId;
        option.innerText = customer.customerName;
        customerSelect.appendChild(option);
    });





    ///##-----create order---------------###############
    function createOrder() {
        const customerId = customerSelect.options[customerSelect.selectedIndex].value;
        const customerName = customerSelect.options[customerSelect.selectedIndex].innerText;

        console.log('customerId', customerId)
        addOrderApi(customerId, customerName);
    }

    function addOrderApi(customerId, customerName) {
        fetch('/api/orders', {
            method: 'POST', // Specify POST method
            headers: {
                'Content-Type': 'application/json' // Indicate that you're sending JSON data
            },
            body: JSON.stringify({ customerId: customerId, customerName: customerName }) // Convert the orderData object to a JSON string
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok: ' + response.statusText);
                }
                return response.json();
            })
            .then(data => {
                console.log('Order created successfully:', data);
                window.location.href = `/orders/edit/${data.orderId}`
                // You can add additional logic here to handle the response data as needed
            })
            .catch(error => {
                console.error('Error creating order:', error);
                // Optionally handle the error
            });
    }

</script>

<style>
    table {
        width: 100%;
        border-collapse: collapse;
    }

    th, td {
        padding: 10px;
        text-align: left;
        border: 1px solid #ddd;
    }

    th {
        background-color: #f2f2f2;
    }

    button {
        margin-left: 10px;
    }
</style>